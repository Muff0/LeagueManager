// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(LeagueContext))]
    [Migration("20250407123003_0006")]
    partial class _0006
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Model.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BlackConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("BlackPlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("GameTimeUTC")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("LeagoKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("boolean");

                    b.Property<int?>("PlayerSeasonPlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerSeasonSeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<bool>("WhiteConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("WhitePlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlackPlayerId");

                    b.HasIndex("LeagoKey");

                    b.HasIndex("SeasonId");

                    b.HasIndex("WhitePlayerId");

                    b.HasIndex("PlayerSeasonPlayerId", "PlayerSeasonSeasonId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Data.Model.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscordHandle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeagoKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeagoMemberId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OGSHandle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Data.Model.PlayerSeason", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipationTier")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "SeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("PlayerSeasons");
                });

            modelBuilder.Entity("Data.Model.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerPlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("OwnerPlayerId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Data.Model.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LeagoL1Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeagoL2Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Data.Model.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscordHandle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxRank")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Data.Model.Match", b =>
                {
                    b.HasOne("Data.Model.Player", "BlackPlayer")
                        .WithMany()
                        .HasForeignKey("BlackPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Player", "WhitePlayer")
                        .WithMany()
                        .HasForeignKey("WhitePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.PlayerSeason", null)
                        .WithMany("Matches")
                        .HasForeignKey("PlayerSeasonPlayerId", "PlayerSeasonSeasonId");

                    b.Navigation("BlackPlayer");

                    b.Navigation("Season");

                    b.Navigation("WhitePlayer");
                });

            modelBuilder.Entity("Data.Model.PlayerSeason", b =>
                {
                    b.HasOne("Data.Model.Player", "Player")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Season", "Season")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Data.Model.Review", b =>
                {
                    b.HasOne("Data.Model.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");

                    b.HasOne("Data.Model.Player", "OwnerPlayer")
                        .WithMany()
                        .HasForeignKey("OwnerPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Teacher", "Teacher")
                        .WithMany("Reviews")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Match");

                    b.Navigation("OwnerPlayer");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Data.Model.Player", b =>
                {
                    b.Navigation("PlayerSeasons");
                });

            modelBuilder.Entity("Data.Model.PlayerSeason", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Data.Model.Season", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("PlayerSeasons");
                });

            modelBuilder.Entity("Data.Model.Teacher", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
