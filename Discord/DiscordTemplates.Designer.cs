//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Discord {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DiscordTemplates {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DiscordTemplates() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Discord.DiscordTemplates", typeof(DiscordTemplates).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///{0} will review the following games:
        ///
        ///{1} 
        /// 
        /// If you can&apos;t attend live, the recorded reviews will be published in {2}
        ///	.
        /// </summary>
        internal static string ReviewEventBodyMessage {
            get {
                return ResourceManager.GetString("ReviewEventBodyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Hello {0}!
        ///A new Live Review Event has been scheduled!
        ///
        ///{1} will review the following games:
        ///
        ///{2} 
        /// 
        ///If you can&apos;t attend live, the recorded reviews will be published in {3}
        ///{4}
        ///	.
        /// </summary>
        internal static string ReviewEventNoticeMessage {
            get {
                return ResourceManager.GetString("ReviewEventNoticeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Hello players!
        ///This is the review schedule for the current Season. 
        ///
        ///{0}
        ///
        ///As before the video reviews will be posted in {1} and you will be pinged if you added your Discord handle to the contact info in your Leago profile.
        ///An email notification will also be sent out when a batch of reviews is published.
        ///
        ///Some reviews will be done live, in which case you will be notified ahead of time.
        ///
        ///If you wish to change your reviewed games or have any questions you can DM or ping {2}.
        ///	.
        /// </summary>
        internal static string ReviewScheduleMessage {
            get {
                return ResourceManager.GetString("ReviewScheduleMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Reviewer: {0} 
        ///{1}
        ///{2}
        /// 
        ///{3}
        ///	.
        /// </summary>
        internal static string ReviewThreadMessage {
            get {
                return ResourceManager.GetString("ReviewThreadMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hello everyone!
        ///The pairings for Round {0} have been published! 
        ///You have until {1} to play your games, please contact your opponent as soon as possible. 
        /// 
        ///For any issues or questions you can DM or ping {2}.
        ///.
        /// </summary>
        internal static string RoundStartMessage {
            get {
                return ResourceManager.GetString("RoundStartMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hey players!
        ///These League Matches will be played soon, come watch them!
        ///	
        ///.
        /// </summary>
        internal static string UpcomingMatchesIntroMessage {
            get {
                return ResourceManager.GetString("UpcomingMatchesIntroMessage", resourceCulture);
            }
        }
    }
}
